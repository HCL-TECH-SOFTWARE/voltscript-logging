{"classname":"ErrorSession","comment":"Class for Collection of Errors","valuetype":"","filenamebase":"ErrorSession_ObjectClass","fqnprefix":"VoltscriptLogging","qn":"ErrorSession","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"86D0FA588865F2E280258B25002EA321","signature":"Public Class ErrorSession","modifiers":"Public","classname":"ErrorSession","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for Collection of Errors&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for Collection of Errors","inlinecomment":" \t &apos; Class for Collection of Errors","codesamplehtml":"", "methods":[{"label":"addError","comment":"Adds an error to the stack.","valuetype":"ErrorType","filenamebase":"addError_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"addError","codesample":"&amp;apos; The following code adds an error if processing fails and aborts the Sub / Function if there were errors. Alternatively, you could throw an uncaught exception or return a variable value that tells the calling function to abort. The calling code could then log the errors.\nForAll obj in jsonObj.getChildren()\n    Try\n        &amp;apos;do stuff\n    Catch\n         Call getErrorSession().addError()\n    End Try\nEnd ForAll\nIf getErrorSession().errorCount &amp;gt; 0 Then\n    Return\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function addError() As ErrorType","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an error to the stack.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an error to the stack.","inlinecomment":" \t &apos; Adds an error to the stack.","parentclassname":"ErrorSession","codesamplehtml":"&amp;apos; The following code adds an error if processing fails and aborts the Sub / Function if there were errors. Alternatively, you could throw an uncaught exception or return a variable value that tells the calling function to abort. The calling code could then log the errors.&lt;br /&gt;ForAll obj in jsonObj.getChildren()&lt;br /&gt;    Try&lt;br /&gt;        &amp;apos;do stuff&lt;br /&gt;    Catch&lt;br /&gt;         Call getErrorSession().addError()&lt;br /&gt;    End Try&lt;br /&gt;End ForAll&lt;br /&gt;If getErrorSession().errorCount &amp;gt; 0 Then&lt;br /&gt;    Return&lt;br /&gt;End If", "signatureelements":["Public","Function"]},{"label":"getAndRemoveLastError","comment":"Gets and removes the last error added to the stack","valuetype":"ErrorType","filenamebase":"getAndRemoveLastError_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"getAndRemoveLastError","codesample":"&amp;apos; This code writes logs for all errors previously captured and clears the stack\nDim errorObj as ErrorType\nSet errorObj = getErrorSession().getAndRemoveLastError()\nWhile (Not errorObj Is Nothing) Then\n    Call getLogSession().createLogEntry(LOG_WARNING, errorObj.getLogMessage(), errorObj.stackTrace, &amp;quot;&amp;quot;)\n    Set errorObj = getErrorSession().getAndRemoveLastError()\nWend","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveLastError() As ErrorType","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets and removes the last error added to the stack&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets and removes the last error added to the stack","inlinecomment":" \t &apos; Gets and removes the last error added to the stack","parentclassname":"ErrorSession","codesamplehtml":"&amp;apos; This code writes logs for all errors previously captured and clears the stack&lt;br /&gt;Dim errorObj as ErrorType&lt;br /&gt;Set errorObj = getErrorSession().getAndRemoveLastError()&lt;br /&gt;While (Not errorObj Is Nothing) Then&lt;br /&gt;    Call getLogSession().createLogEntry(LOG_WARNING, errorObj.getLogMessage(), errorObj.stackTrace, &amp;quot;&amp;quot;)&lt;br /&gt;    Set errorObj = getErrorSession().getAndRemoveLastError()&lt;br /&gt;Wend", "signatureelements":["Public","Function"]},{"label":"errorCount","comment":"Count of errors currently stacked","valuetype":"Integer","filenamebase":"errorCount_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"Get.errorCount","codesample":"If (getErrorSession().errorCount &amp;gt; 0) Then Return","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errorCount As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Count of errors currently stacked&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Count of errors currently stacked","inlinecomment":" \t &apos; Count of errors currently stacked","parentclassname":"ErrorSession","codesamplehtml":"If (getErrorSession().errorCount &amp;gt; 0) Then Return", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"errors","comment":"Collcetion of ErrorTypes","valuetype":"Variant","filenamebase":"errors_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"Get.errors","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errors As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collcetion of ErrorTypes&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collcetion of ErrorTypes","inlinecomment":" \t &apos; Collcetion of ErrorTypes","parentclassname":"ErrorSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.","inlinecomment":" \t &apos; Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.","parentclassname":"ErrorSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"reset","comment":"Clears all errors from the session","valuetype":"","filenamebase":"reset_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"reset","codesample":"Call getErrorSession().reset()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reset()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Clears all errors from the session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Clears all errors from the session","inlinecomment":" \t &apos; Clears all errors from the session","parentclassname":"ErrorSession","codesamplehtml":"Call getErrorSession().reset()", "signatureelements":["Public","Sub"]}]}
