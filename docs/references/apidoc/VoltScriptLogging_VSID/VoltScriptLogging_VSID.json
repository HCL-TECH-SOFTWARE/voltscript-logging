{"VSIDname":"VoltScript Logging","comment":"","valuetype":"","filenamebase":"VoltScriptLogging_VSID","fqnprefix":"","qn":"VoltScriptLogging","codesample":"","signaturecode":131072,"instancecode":131072,"signature":"VSID VoltScript Logging","modifiers":"","vsidname":"VoltScript Logging","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "libraries":[{"label":"VoltscriptLogging","comment":"Classes for creating and managing VoltScript logs","valuetype":"","filenamebase":"VoltscriptLogging_Library","fqnprefix":"VoltScriptLogging","qn":"VoltscriptLogging","codesample":"","signaturecode":65536,"instancecode":65536,"description":"Classes for creating and managing JSON-formatted text logs in","codesamplehtml":"","scriptcreator":"Rocky Oliver","signature":"Library VoltscriptLogging","modifiers":"","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Classes for creating and managing VoltScript logs&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Classes for creating and managing VoltScript logs","inlinecomment":" \t &apos; Classes for creating and managing VoltScript logs", "constants":[{"label":"LOG_FATAL","comment":"Highest logging level.","valuetype":"","filenamebase":"LOGFATAL_Constant","fqnprefix":"VoltscriptLogging","qn":"LOGFATAL","codesample":"","signaturecode":2056,"instancecode":8,"value":32,"f_returnsobject":0,"signature":"Public Const LOG_FATAL = 32","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Highest logging level.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Highest logging level.","inlinecomment":" \t &apos; Highest logging level.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_TRACE","comment":"Lowest logging level, for most verbose logging.","valuetype":"","filenamebase":"LOGTRACE_Constant","fqnprefix":"VoltscriptLogging","qn":"LOGTRACE","codesample":"","signaturecode":2056,"instancecode":8,"value":1,"f_returnsobject":0,"signature":"Public Const LOG_TRACE = 1","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Lowest logging level, for most verbose logging.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Lowest logging level, for most verbose logging.","inlinecomment":" \t &apos; Lowest logging level, for most verbose logging.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_INFO","comment":"Fourth-highest logging level, for informational messages.","valuetype":"","filenamebase":"LOGINFO_Constant","fqnprefix":"VoltscriptLogging","qn":"LOGINFO","codesample":"","signaturecode":2056,"instancecode":8,"value":4,"f_returnsobject":0,"signature":"Public Const LOG_INFO = 4","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Fourth-highest logging level, for informational messages.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Fourth-highest logging level, for informational messages.","inlinecomment":" \t &apos; Fourth-highest logging level, for informational messages.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"NO_LOGGING","comment":"Only used in LogWriters, to prevent logging any log entries.","valuetype":"","filenamebase":"NOLOGGING_Constant","fqnprefix":"VoltscriptLogging","qn":"NOLOGGING","codesample":"","signaturecode":2056,"instancecode":8,"value":0,"f_returnsobject":0,"signature":"Public Const NO_LOGGING = 0","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Only used in LogWriters, to prevent logging any log entries.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Only used in LogWriters, to prevent logging any log entries.","inlinecomment":" \t &apos; Only used in LogWriters, to prevent logging any log entries.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_ERROR","comment":"Second-highest logging level, for errors that are not fatal to continuing process.","valuetype":"","filenamebase":"LOGERROR_Constant","fqnprefix":"VoltscriptLogging","qn":"LOGERROR","codesample":"","signaturecode":2056,"instancecode":8,"value":16,"f_returnsobject":0,"signature":"Public Const LOG_ERROR = 16","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Second-highest logging level, for errors that are not fatal to continuing process.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Second-highest logging level, for errors that are not fatal to continuing process.","inlinecomment":" \t &apos; Second-highest logging level, for errors that are not fatal to continuing process.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_DEBUG","comment":"Fifth-highest logging level, for more extensive messages than most support requires.","valuetype":"","filenamebase":"LOGDEBUG_Constant","fqnprefix":"VoltscriptLogging","qn":"LOGDEBUG","codesample":"","signaturecode":2056,"instancecode":8,"value":2,"f_returnsobject":0,"signature":"Public Const LOG_DEBUG = 2","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Fifth-highest logging level, for more extensive messages than most support requires.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Fifth-highest logging level, for more extensive messages than most support requires.","inlinecomment":" \t &apos; Fifth-highest logging level, for more extensive messages than most support requires.","codesamplehtml":"", "signatureelements":["Public","Const"]},{"label":"LOG_WARN","comment":"Third-highest logging level, for log entries that are not errors but should be addressed.","valuetype":"","filenamebase":"LOGWARN_Constant","fqnprefix":"VoltscriptLogging","qn":"LOGWARN","codesample":"","signaturecode":2056,"instancecode":8,"value":8,"f_returnsobject":0,"signature":"Public Const LOG_WARN = 8","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Third-highest logging level, for log entries that are not errors but should be addressed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Third-highest logging level, for log entries that are not errors but should be addressed.","inlinecomment":" \t &apos; Third-highest logging level, for log entries that are not errors but should be addressed.","codesamplehtml":"", "signatureelements":["Public","Const"]}], "methods":[{"label":"getErrorSession","comment":"","valuetype":"ErrorSession","filenamebase":"getErrorSession_Method","fqnprefix":"VoltscriptLogging","qn":"getErrorSession","codesample":"Call getErrorSession().addError()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getErrorSession() As ErrorSession","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"Call getErrorSession().addError()", "signatureelements":["Public","Function"]},{"label":"getPropertyNames","comment":"","valuetype":"Variant","filenamebase":"getPropertyNames_Method","fqnprefix":"VoltscriptLogging","qn":"getPropertyNames","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function getPropertyNames() As Variant","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Function"]},{"label":"getPropertyValue","comment":"","valuetype":"Variant","filenamebase":"getPropertyValue_Method","fqnprefix":"VoltscriptLogging","qn":"getPropertyValue","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(logEntry As LogEntry, propertyName As String)","signature":"Public Function getPropertyValue(logEntry As LogEntry, propertyName As String) As Variant","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"logEntry","comment":"Current LogEntry","valuetype":"LogEntry","filenamebase":"logEntry_ValuedElement","fqnprefix":"VoltscriptLogginggetPropertyValue","qn":"logEntry","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Current LogEntry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Current LogEntry","inlinecomment":" \t &apos; Current LogEntry"},{"label":"propertyName","comment":"Property name to be retrieved","valuetype":"String","filenamebase":"propertyName_ValuedElement","fqnprefix":"VoltscriptLogginggetPropertyValue","qn":"propertyName","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Property name to be retrieved&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Property name to be retrieved","inlinecomment":" \t &apos; Property name to be retrieved"}]}], "classes":[{"classname":"BaseLogWriter","comment":"Abstract class for writing log entries in the session","valuetype":"","filenamebase":"BaseLogWriter_ObjectClass","fqnprefix":"VoltscriptLogging","qn":"BaseLogWriter","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"3B373E9EC1C6805D00258B1C00328BBC","signature":"Public Class BaseLogWriter","modifiers":"Public","classname":"BaseLogWriter","parentclassname":"None","constructorsignature":"Public Sub New(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Abstract class for writing log entries in the session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Abstract class for writing log entries in the session","inlinecomment":" \t &apos; Abstract class for writing log entries in the session","codesamplehtml":"", "methods":[{"label":"convertLogEntryToMessage","comment":"Converts a log entry in a specific string format using the formatter passed in. Override this method to skip using a formatter.","valuetype":"String","filenamebase":"convertLogEntryToMessage_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"convertLogEntryToMessage","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(logEntry As LogEntry)","signature":"Public Function convertLogEntryToMessage(logEntry As LogEntry) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts a log entry in a specific string format using the formatter passed in. Override this method to skip using a formatter.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts a log entry in a specific string format using the formatter passed in. Override this method to skip using a formatter.","inlinecomment":" \t &apos; Converts a log entry in a specific string format using the formatter passed in. Override this method to skip using a formatter.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"logEntry","comment":"Log Entry to format","valuetype":"LogEntry","filenamebase":"logEntry_ValuedElement","fqnprefix":"VoltscriptLoggingBaseLogWriterconvertLogEntryToMessage","qn":"logEntry","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Log Entry to format&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Log Entry to format","inlinecomment":" \t &apos; Log Entry to format"}]},{"label":"writeToLog","comment":"Write all entries, as appropriate, to the log","valuetype":"Boolean","filenamebase":"writeToLog_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"writeToLog","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(session As LogSession)","signature":"Public Function writeToLog(session As LogSession) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Write all entries, as appropriate, to the log&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Write all entries, as appropriate, to the log","inlinecomment":" \t &apos; Write all entries, as appropriate, to the log","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"session","comment":"Current session being deleted","valuetype":"LogSession","filenamebase":"session_ValuedElement","fqnprefix":"VoltscriptLoggingBaseLogWriterwriteToLog","qn":"session","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Current session being deleted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Current session being deleted","inlinecomment":" \t &apos; Current session being deleted"}]},{"label":"formatter","comment":"String to manage output format, using mustache templating for properties of a Log Entry.","valuetype":"String","filenamebase":"formatter_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"Get.formatter","codesample":"Dim fmt as String\nDim logger as BaseLogWriter\nfmt = |{{levelName}}: [{{timestamp}}] {{message}}\n{{extInfo}}|\nSet logger = new BaseLogWriter(&amp;quot;ConsoleLogger&amp;quot;, LEVEL_INFO, fmt)","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get formatter As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String to manage output format, using mustache templating for properties of a Log Entry.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String to manage output format, using mustache templating for properties of a Log Entry.","inlinecomment":" \t &apos; String to manage output format, using mustache templating for properties of a Log Entry.","parentclassname":"BaseLogWriter","codesamplehtml":"Dim fmt as String&lt;br /&gt;Dim logger as BaseLogWriter&lt;br /&gt;fmt = |{{levelName}}: [{{timestamp}}] {{message}}&lt;br /&gt;{{extInfo}}|&lt;br /&gt;Set logger = new BaseLogWriter(&amp;quot;ConsoleLogger&amp;quot;, LEVEL_INFO, fmt)", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"label","comment":"Label with which to refer to the log writer","valuetype":"String","filenamebase":"label_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"Get.label","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get label As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label with which to refer to the log writer&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label with which to refer to the log writer","inlinecomment":" \t &apos; Label with which to refer to the log writer","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"maxLevel","comment":"Level at which to log out","valuetype":"Integer","filenamebase":"maxLevel_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"Get.maxLevel","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get maxLevel As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Level at which to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Level at which to log out","inlinecomment":" \t &apos; Level at which to log out","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"minLevel","comment":"","valuetype":"Integer","filenamebase":"minLevel_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"Get.minLevel","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get minLevel As Integer","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"BaseLogWriter","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"initializeLog","comment":"Overload this method to do any setup before processing the LogEntry objects.","valuetype":"","filenamebase":"initializeLog_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"initializeLog","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub initializeLog()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overload this method to do any setup before processing the LogEntry objects.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overload this method to do any setup before processing the LogEntry objects.","inlinecomment":" \t &apos; Overload this method to do any setup before processing the LogEntry objects.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","signature":"Public Sub New(label As String, minLevel As Integer, maxLevel As Integer, formatter As String)","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"label","comment":"Name for the log writer, which will be the key when added to the session","valuetype":"String","filenamebase":"label_ValuedElement","fqnprefix":"VoltscriptLoggingBaseLogWriterNew","qn":"label","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name for the log writer, which will be the key when added to the session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name for the log writer, which will be the key when added to the session","inlinecomment":" \t &apos; Name for the log writer, which will be the key when added to the session"},{"label":"minLevel","comment":"Minimum level to log out","valuetype":"Integer","filenamebase":"minLevel_ValuedElement","fqnprefix":"VoltscriptLoggingBaseLogWriterNew","qn":"minLevel","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minimum level to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minimum level to log out","inlinecomment":" \t &apos; Minimum level to log out"},{"label":"maxLevel","comment":"Maximum level to log out","valuetype":"Integer","filenamebase":"maxLevel_ValuedElement","fqnprefix":"VoltscriptLoggingBaseLogWriterNew","qn":"maxLevel","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum level to log out&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum level to log out","inlinecomment":" \t &apos; Maximum level to log out"},{"label":"formatter","comment":"A string format to log out, which can include mustache template format to inlcude LogEntry properties","valuetype":"String","filenamebase":"formatter_ValuedElement","fqnprefix":"VoltscriptLoggingBaseLogWriterNew","qn":"formatter","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A string format to log out, which can include mustache template format to inlcude LogEntry properties&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A string format to log out, which can include mustache template format to inlcude LogEntry properties","inlinecomment":" \t &apos; A string format to log out, which can include mustache template format to inlcude LogEntry properties"}]},{"label":"outputLogEntryMessage","comment":"Writes out a specific LogEntry (already converted to a String). Overload this message for specific implementations.","valuetype":"","filenamebase":"outputLogEntryMessage_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"outputLogEntryMessage","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(message As String)","signature":"Public Sub outputLogEntryMessage(message As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Writes out a specific LogEntry (already converted to a String). Overload this message for specific implementations.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Writes out a specific LogEntry (already converted to a String). Overload this message for specific implementations.","inlinecomment":" \t &apos; Writes out a specific LogEntry (already converted to a String). Overload this message for specific implementations.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"message","comment":"Message to be outputted","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltscriptLoggingBaseLogWriteroutputLogEntryMessage","qn":"message","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Message to be outputted&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Message to be outputted","inlinecomment":" \t &apos; Message to be outputted"}]},{"label":"terminateLog","comment":"Overload this method to do any setup after processing the LogEntry objects.","valuetype":"","filenamebase":"terminateLog_Method","fqnprefix":"VoltscriptLogging.BaseLogWriter","qn":"terminateLog","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub terminateLog()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overload this method to do any setup after processing the LogEntry objects.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overload this method to do any setup after processing the LogEntry objects.","inlinecomment":" \t &apos; Overload this method to do any setup after processing the LogEntry objects.","parentclassname":"BaseLogWriter","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"ErrorSession","comment":"Class for Collection of Errors","valuetype":"","filenamebase":"ErrorSession_ObjectClass","fqnprefix":"VoltscriptLogging","qn":"ErrorSession","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"86D0FA588865F2E280258B25002EA321","signature":"Public Class ErrorSession","modifiers":"Public","classname":"ErrorSession","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class for Collection of Errors&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class for Collection of Errors","inlinecomment":" \t &apos; Class for Collection of Errors","codesamplehtml":"", "methods":[{"label":"addError","comment":"Adds an error to the stack.","valuetype":"ErrorType","filenamebase":"addError_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"addError","codesample":"&amp;apos; The following code adds an error if processing fails and aborts the Sub / Function if there were errors. Alternatively, you could throw an uncaught exception or return a variable value that tells the calling function to abort. The calling code could then log the errors.\nForAll obj in jsonObj.getChildren()\n    Try\n        &amp;apos;do stuff\n    Catch\n         Call getErrorSession().addError()\n    End Try\nEnd ForAll\nIf getErrorSession().errorCount &amp;gt; 0 Then\n    Return\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function addError() As ErrorType","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an error to the stack.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an error to the stack.","inlinecomment":" \t &apos; Adds an error to the stack.","parentclassname":"ErrorSession","codesamplehtml":"&amp;apos; The following code adds an error if processing fails and aborts the Sub / Function if there were errors. Alternatively, you could throw an uncaught exception or return a variable value that tells the calling function to abort. The calling code could then log the errors.&lt;br /&gt;ForAll obj in jsonObj.getChildren()&lt;br /&gt;    Try&lt;br /&gt;        &amp;apos;do stuff&lt;br /&gt;    Catch&lt;br /&gt;         Call getErrorSession().addError()&lt;br /&gt;    End Try&lt;br /&gt;End ForAll&lt;br /&gt;If getErrorSession().errorCount &amp;gt; 0 Then&lt;br /&gt;    Return&lt;br /&gt;End If", "signatureelements":["Public","Function"]},{"label":"getAndRemoveLastError","comment":"Gets and removes the last error added to the stack","valuetype":"ErrorType","filenamebase":"getAndRemoveLastError_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"getAndRemoveLastError","codesample":"&amp;apos; This code writes logs for all errors previously captured and clears the stack\nDim errorObj as ErrorType\nSet errorObj = getErrorSession().getAndRemoveLastError()\nWhile (Not errorObj Is Nothing) Then\n    Call getLogSession().createLogEntry(LOG_WARNING, errorObj.getLogMessage(), errorObj.stackTrace, &amp;quot;&amp;quot;)\n    Set errorObj = getErrorSession().getAndRemoveLastError()\nWend","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getAndRemoveLastError() As ErrorType","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Gets and removes the last error added to the stack&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Gets and removes the last error added to the stack","inlinecomment":" \t &apos; Gets and removes the last error added to the stack","parentclassname":"ErrorSession","codesamplehtml":"&amp;apos; This code writes logs for all errors previously captured and clears the stack&lt;br /&gt;Dim errorObj as ErrorType&lt;br /&gt;Set errorObj = getErrorSession().getAndRemoveLastError()&lt;br /&gt;While (Not errorObj Is Nothing) Then&lt;br /&gt;    Call getLogSession().createLogEntry(LOG_WARNING, errorObj.getLogMessage(), errorObj.stackTrace, &amp;quot;&amp;quot;)&lt;br /&gt;    Set errorObj = getErrorSession().getAndRemoveLastError()&lt;br /&gt;Wend", "signatureelements":["Public","Function"]},{"label":"errorCount","comment":"Count of errors currently stacked","valuetype":"Integer","filenamebase":"errorCount_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"Get.errorCount","codesample":"If (getErrorSession().errorCount &amp;gt; 0) Then Return","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errorCount As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Count of errors currently stacked&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Count of errors currently stacked","inlinecomment":" \t &apos; Count of errors currently stacked","parentclassname":"ErrorSession","codesamplehtml":"If (getErrorSession().errorCount &amp;gt; 0) Then Return", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"errors","comment":"Collcetion of ErrorTypes","valuetype":"Variant","filenamebase":"errors_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"Get.errors","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get errors As Variant","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Collcetion of ErrorTypes&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Collcetion of ErrorTypes","inlinecomment":" \t &apos; Collcetion of ErrorTypes","parentclassname":"ErrorSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.","inlinecomment":" \t &apos; Constructor. Can only be used from getErrorSession(). Do not use the constructor, use getErrorSession() instead.","parentclassname":"ErrorSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"reset","comment":"Clears all errors from the session","valuetype":"","filenamebase":"reset_Method","fqnprefix":"VoltscriptLogging.ErrorSession","qn":"reset","codesample":"Call getErrorSession().reset()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reset()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Clears all errors from the session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Clears all errors from the session","inlinecomment":" \t &apos; Clears all errors from the session","parentclassname":"ErrorSession","codesamplehtml":"Call getErrorSession().reset()", "signatureelements":["Public","Sub"]}]},{"classname":"ErrorType","comment":"Holder for errors","valuetype":"","filenamebase":"ErrorType_ObjectClass","fqnprefix":"VoltscriptLogging","qn":"ErrorType","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"27D3FC195F47CD6980258B25003DCD8E","signature":"Public Class ErrorType","modifiers":"Public","classname":"ErrorType","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Holder for errors&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Holder for errors","inlinecomment":" \t &apos; Holder for errors","codesamplehtml":"", "methods":[{"label":"getLogMessage","comment":"Returns &amp;quot;Error &amp;quot; &amp;amp; Me.message &amp;amp; &amp;quot; (&amp;quot; &amp;amp; Me.code &amp;amp; &amp;quot;) on line &amp;quot; &amp;amp; Me.lineNum","valuetype":"String","filenamebase":"getLogMessage_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"getLogMessage","codesample":"&amp;apos; This code writes logs for all errors previously captured and clears the stack\nDim errorObj as ErrorType\nSet errorObj = getErrorSession().getAndRemoveLastError()\nWhile (Not errorObj Is Nothing) Then\n    Call getLogSession().createLogEntry(LOG_WARNING, errorObj.getLogMessage(), errorObj.stackTrace, &amp;quot;&amp;quot;)\n    Set errorObj = getErrorSession().getAndRemoveLastError()\nWend","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function getLogMessage() As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns &amp;quot;Error &amp;quot; &amp;amp; Me.message &amp;amp; &amp;quot; (&amp;quot; &amp;amp; Me.code &amp;amp; &amp;quot;) on line &amp;quot; &amp;amp; Me.lineNum&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns &amp;quot;Error &amp;quot; &amp;amp; Me.message &amp;amp; &amp;quot; (&amp;quot; &amp;amp; Me.code &amp;amp; &amp;quot;) on line &amp;quot; &amp;amp; Me.lineNum","inlinecomment":" \t &apos; Returns &amp;quot;Error &amp;quot; &amp;amp; Me.message &amp;amp; &amp;quot; (&amp;quot; &amp;amp; Me.code &amp;amp; &amp;quot;) on line &amp;quot; &amp;amp; Me.lineNum","parentclassname":"ErrorType","codesamplehtml":"&amp;apos; This code writes logs for all errors previously captured and clears the stack&lt;br /&gt;Dim errorObj as ErrorType&lt;br /&gt;Set errorObj = getErrorSession().getAndRemoveLastError()&lt;br /&gt;While (Not errorObj Is Nothing) Then&lt;br /&gt;    Call getLogSession().createLogEntry(LOG_WARNING, errorObj.getLogMessage(), errorObj.stackTrace, &amp;quot;&amp;quot;)&lt;br /&gt;    Set errorObj = getErrorSession().getAndRemoveLastError()&lt;br /&gt;Wend", "signatureelements":["Public","Function"]},{"label":"code","comment":"Error code","valuetype":"Integer","filenamebase":"code_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Get.code","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get code As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error code&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error code","inlinecomment":" \t &apos; Error code","parentclassname":"ErrorType","codesamplehtml":"", "signatureelements":["Public","Property","Get"]},{"label":"lineNum","comment":"Line number where the error occurred","valuetype":"Integer","filenamebase":"lineNum_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Get.lineNum","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get lineNum As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Line number where the error occurred&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Line number where the error occurred","inlinecomment":" \t &apos; Line number where the error occurred","parentclassname":"ErrorType","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"message","comment":"Error message","valuetype":"String","filenamebase":"message_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Get.message","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get message As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error message&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error message","inlinecomment":" \t &apos; Error message","parentclassname":"ErrorType","codesamplehtml":"", "signatureelements":["Public","Property","Get"]},{"label":"methodName","comment":"Method where the error occurred","valuetype":"String","filenamebase":"methodName_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Get.methodName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get methodName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Method where the error occurred&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Method where the error occurred","inlinecomment":" \t &apos; Method where the error occurred","parentclassname":"ErrorType","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"scriptName","comment":"Script file containing the method.","valuetype":"String","filenamebase":"scriptName_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Get.scriptName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get scriptName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Script file containing the method.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Script file containing the method.","inlinecomment":" \t &apos; Script file containing the method.","parentclassname":"ErrorType","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"stackTrace","comment":"Stack trace, excluding this class","valuetype":"String","filenamebase":"stackTrace_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Get.stackTrace","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get stackTrace As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Stack trace, excluding this class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Stack trace, excluding this class","inlinecomment":" \t &apos; Stack trace, excluding this class","parentclassname":"ErrorType","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"code","comment":"Error code","valuetype":"Integer","filenamebase":"code_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Set.code","codesample":"","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set code As Integer","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error code&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error code","inlinecomment":" \t &apos; Error code","parentclassname":"ErrorType","codesamplehtml":"", "signatureelements":["Public","Property","Set"]},{"label":"message","comment":"Error message","valuetype":"String","filenamebase":"message_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"Set.message","codesample":"","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set message As String","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Error message&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Error message","inlinecomment":" \t &apos; Error message","parentclassname":"ErrorType","codesamplehtml":"", "signatureelements":["Public","Property","Set"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltscriptLogging.ErrorType","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"ErrorType","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"LogEntry","comment":"Represents a single Log Entry in the Log session","valuetype":"","filenamebase":"LogEntry_ObjectClass","fqnprefix":"VoltscriptLogging","qn":"LogEntry","codesample":"Dim log as New LogSession(&amp;quot;&amp;quot;)\nDim logEntry as LogEntry\nSet logEntry = log.createLogEntry(...)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"9B339BE3D1D663F100258A7F0050C30B","signature":"Public Class LogEntry","modifiers":"Public","classname":"LogEntry","parentclassname":"None","constructorsignature":"Public Sub New(levelNum As Integer, message As String, extInfo As String, className As String)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Represents a single Log Entry in the Log session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Represents a single Log Entry in the Log session","inlinecomment":" \t &apos; Represents a single Log Entry in the Log session","codesamplehtml":"Dim log as New LogSession(&amp;quot;&amp;quot;)&lt;br /&gt;Dim logEntry as LogEntry&lt;br /&gt;Set logEntry = log.createLogEntry(...)", "methods":[{"label":"printSummary","comment":"Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.","valuetype":"String","filenamebase":"printSummary_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"printSummary","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Function printSummary() As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.","inlinecomment":" \t &apos; Outputs a summary of the properties of the LogEntry to console. Only relevant for basic debugging.","parentclassname":"LogEntry","codesamplehtml":"", "signatureelements":["Public","Function"]},{"label":"className","comment":"VoltScript class the LogEntry was triggered from, passed into the constructor","valuetype":"String","filenamebase":"className_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.className","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get className As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript class the LogEntry was triggered from, passed into the constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript class the LogEntry was triggered from, passed into the constructor","inlinecomment":" \t &apos; VoltScript class the LogEntry was triggered from, passed into the constructor","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"entryID","comment":"A unique identifier/key for the entry","valuetype":"String","filenamebase":"entryID_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.entryID","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get entryID As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A unique identifier/key for the entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A unique identifier/key for the entry","inlinecomment":" \t &apos; A unique identifier/key for the entry","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"extInfo","comment":"Extended info that may be included with the message, such as debug info, stack trace, etc.","valuetype":"String","filenamebase":"extInfo_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.extInfo","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get extInfo As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Extended info that may be included with the message, such as debug info, stack trace, etc.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Extended info that may be included with the message, such as debug info, stack trace, etc.","inlinecomment":" \t &apos; Extended info that may be included with the message, such as debug info, stack trace, etc.","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"level","comment":"The level assigned to the entry","valuetype":"Integer","filenamebase":"level_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.level","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get level As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The level assigned to the entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The level assigned to the entry","inlinecomment":" \t &apos; The level assigned to the entry","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"levelName","comment":"Level as s string","valuetype":"String","filenamebase":"levelName_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.levelName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get levelName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Level as s string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Level as s string","inlinecomment":" \t &apos; Level as s string","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"libraryName","comment":"Name of the VSS library where the log entry was created","valuetype":"String","filenamebase":"libraryName_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.libraryName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get libraryName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the VSS library where the log entry was created&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the VSS library where the log entry was created","inlinecomment":" \t &apos; Name of the VSS library where the log entry was created","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"lineNum","comment":"Line number where the condition occurred","valuetype":"Integer","filenamebase":"lineNum_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.lineNum","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get lineNum As Integer","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Line number where the condition occurred&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Line number where the condition occurred","inlinecomment":" \t &apos; Line number where the condition occurred","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"message","comment":"The text message of the entry","valuetype":"String","filenamebase":"message_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.message","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get message As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;The text message of the entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"The text message of the entry","inlinecomment":" \t &apos; The text message of the entry","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"methodName","comment":"Name of the method (Sub or Function) where the log entry was created","valuetype":"String","filenamebase":"methodName_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.methodName","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get methodName As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Name of the method (Sub or Function) where the log entry was created&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Name of the method (Sub or Function) where the log entry was created","inlinecomment":" \t &apos; Name of the method (Sub or Function) where the log entry was created","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"stackTrace","comment":"","valuetype":"Variant","filenamebase":"stackTrace_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.stackTrace","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get stackTrace As Variant","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"timestamp","comment":"When the log entry was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.","valuetype":"String","filenamebase":"timestamp_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"Get.timestamp","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get timestamp As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;When the log entry was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"When the log entry was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.","inlinecomment":" \t &apos; When the log entry was created. This is date/time in yyyy-MM-dd hh:mm:ss format in the current platform&amp;apos;s timezone.","parentclassname":"LogEntry","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltscriptLogging.LogEntry","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(levelNum As Integer, message As String, extInfo As String, className As String)","signature":"Public Sub New(levelNum As Integer, message As String, extInfo As String, className As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"LogEntry","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"levelNum","comment":"Level for the LogEntry, restricted to the LOG_.... constants","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltscriptLoggingLogEntryNew","qn":"levelNum","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Level for the LogEntry, restricted to the LOG_.... constants&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Level for the LogEntry, restricted to the LOG_.... constants","inlinecomment":" \t &apos; Level for the LogEntry, restricted to the LOG_.... constants"},{"label":"message","comment":"A short message to log","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltscriptLoggingLogEntryNew","qn":"message","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;A short message to log&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"A short message to log","inlinecomment":" \t &apos; A short message to log"},{"label":"extInfo","comment":"Additional information to log","valuetype":"String","filenamebase":"extInfo_ValuedElement","fqnprefix":"VoltscriptLoggingLogEntryNew","qn":"extInfo","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Additional information to log&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Additional information to log","inlinecomment":" \t &apos; Additional information to log"},{"label":"className","comment":"Class where the error was triggered, if relevant","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltscriptLoggingLogEntryNew","qn":"className","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class where the error was triggered, if relevant&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class where the error was triggered, if relevant","inlinecomment":" \t &apos; Class where the error was triggered, if relevant"}]}]},{"classname":"LogSession","comment":"Base class for VoltScript logging","valuetype":"","filenamebase":"LogSession_ObjectClass","fqnprefix":"VoltscriptLogging","qn":"LogSession","codesample":"Dim log as New LogSession","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"7AD3BBAF0294573900258A7F004F94A5","classid":"497E755B650E585B00258A7F004FD469","signature":"Public Class LogSession","modifiers":"Public","classname":"LogSession","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base class for VoltScript logging&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base class for VoltScript logging","inlinecomment":" \t &apos; Base class for VoltScript logging","codesamplehtml":"Dim log as New LogSession", "methods":[{"label":"addLogWriter","comment":"Adds a log writer for writing out log entries somewhere","valuetype":"LogSession","filenamebase":"addLogWriter_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"addLogWriter","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(logWriter As BaseLogWriter)","signature":"Public Function addLogWriter(logWriter As BaseLogWriter) As LogSession","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a log writer for writing out log entries somewhere&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a log writer for writing out log entries somewhere","inlinecomment":" \t &apos; Adds a log writer for writing out log entries somewhere","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"logWriter","comment":"Instance of BaseLogWriter or derived class","valuetype":"BaseLogWriter","filenamebase":"logWriter_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessionaddLogWriter","qn":"logWriter","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Instance of BaseLogWriter or derived class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Instance of BaseLogWriter or derived class","inlinecomment":" \t &apos; Instance of BaseLogWriter or derived class"}]},{"label":"createLogEntry","comment":"","valuetype":"LogEntry","filenamebase":"createLogEntry_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"createLogEntry","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(levelNum As Integer, message As String, extInfo As String, className As String)","signature":"Public Function createLogEntry(levelNum As Integer, message As String, extInfo As String, className As String) As LogEntry","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"levelNum","comment":"the Logging Level of the entry; you can use the constant as well","valuetype":"Integer","filenamebase":"levelNum_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessioncreateLogEntry","qn":"levelNum","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the Logging Level of the entry; you can use the constant as well&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the Logging Level of the entry; you can use the constant as well","inlinecomment":" \t &apos; the Logging Level of the entry; you can use the constant as well"},{"label":"message","comment":"the text message of the entry","valuetype":"String","filenamebase":"message_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessioncreateLogEntry","qn":"message","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the text message of the entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the text message of the entry","inlinecomment":" \t &apos; the text message of the entry"},{"label":"extInfo","comment":"Any extended information to include with the entry or blank","valuetype":"String","filenamebase":"extInfo_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessioncreateLogEntry","qn":"extInfo","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Any extended information to include with the entry or blank&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Any extended information to include with the entry or blank","inlinecomment":" \t &apos; Any extended information to include with the entry or blank"},{"label":"className","comment":"Class from which the entry is logged or blank","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessioncreateLogEntry","qn":"className","argumentindex":4,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class from which the entry is logged or blank&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class from which the entry is logged or blank","inlinecomment":" \t &apos; Class from which the entry is logged or blank"}]},{"label":"getLogEntriesByLevel","comment":"Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","valuetype":"Variant","filenamebase":"getLogEntriesByLevel_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"getLogEntriesByLevel","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(minLevel As Integer, maxLevel As Integer)","signature":"Public Function getLogEntriesByLevel(minLevel As Integer, maxLevel As Integer) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","inlinecomment":" \t &apos; Filters the LogEntry objects into an array containing just those at or above the minimum level and also at or below the maximum level.","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"minLevel","comment":"Minimum level of logs you want","valuetype":"Integer","filenamebase":"minLevel_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessiongetLogEntriesByLevel","qn":"minLevel","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Minimum level of logs you want&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Minimum level of logs you want","inlinecomment":" \t &apos; Minimum level of logs you want"},{"label":"maxLevel","comment":"Maximum level of the logs you want","valuetype":"Integer","filenamebase":"maxLevel_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessiongetLogEntriesByLevel","qn":"maxLevel","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Maximum level of the logs you want&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Maximum level of the logs you want","inlinecomment":" \t &apos; Maximum level of the logs you want"}]},{"label":"getLogEntryByID","comment":"","valuetype":"LogEntry","filenamebase":"getLogEntryByID_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"getLogEntryByID","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(entryID As String)","signature":"Public Function getLogEntryByID(entryID As String) As LogEntry","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"entryID","comment":"the entryID of the desired log entry","valuetype":"String","filenamebase":"entryID_ValuedElement","fqnprefix":"VoltscriptLoggingLogSessiongetLogEntryByID","qn":"entryID","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;the entryID of the desired log entry&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"the entryID of the desired log entry","inlinecomment":" \t &apos; the entryID of the desired log entry"}]},{"label":"lastEntry","comment":"Last log entry created / added","valuetype":"LogEntry","filenamebase":"lastEntry_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"Get.lastEntry","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get lastEntry As LogEntry","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Last log entry created / added&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Last log entry created / added","inlinecomment":" \t &apos; Last log entry created / added","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Property","Get"]},{"label":"sessionID","comment":"Unique ID for the session","valuetype":"String","filenamebase":"sessionID_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"Get.sessionID","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get sessionID As String","modifiers":"Public Get","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Unique ID for the session&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Unique ID for the session","inlinecomment":" \t &apos; Unique ID for the session","parentclassname":"LogSession","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"lastEntry","comment":"Last log entry created / added","valuetype":"LogEntry","filenamebase":"lastEntry_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"Set.lastEntry","codesample":"","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set lastEntry As LogEntry","modifiers":"Public Set","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Last log entry created / added&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Last log entry created / added","inlinecomment":" \t &apos; Last log entry created / added","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Property","Set"]},{"label":"Delete","comment":"Destructor, during which LogWriters are processed","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Destructor, during which LogWriters are processed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Destructor, during which LogWriters are processed","inlinecomment":" \t &apos; Destructor, during which LogWriters are processed","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","inlinecomment":" \t &apos; Constructor. Can only be used from getLogSession(). Do not use this constructor, use getLogSession() instead.","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"reset","comment":"Deletes the LogSession without writing out entries","valuetype":"","filenamebase":"reset_Method","fqnprefix":"VoltscriptLogging.LogSession","qn":"reset","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub reset()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deletes the LogSession without writing out entries&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deletes the LogSession without writing out entries","inlinecomment":" \t &apos; Deletes the LogSession without writing out entries","parentclassname":"LogSession","codesamplehtml":"", "signatureelements":["Public","Sub"]}], "variables":[]}], "variables":[]}]}
